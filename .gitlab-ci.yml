stages:
#  - test
  - benchmark
  - upload

#test:
#  image: mambaorg/micromamba
#  stage: test
#  parallel:
#    matrix:
#      - PYTHON: [ '3.7', '3.8', '3.9', '3.10' ]
#        NAME: ['base', 'fenics', 'petsc', 'mpi4py']
#  artifacts:
#    name: "$NAME_$PYTHON"
#    paths:
#      - coverage_${NAME}_3.10.dat
#      - data_3.10
#  before_script:
#    - micromamba create --yes python=$PYTHON -f etc/environment-$NAME.yml
#    - eval "$(micromamba shell hook --shell=bash)"
#    - micromamba activate pySDC
#    - micromamba install --yes -c conda-forge openssh
#  script:
#    - echo $NAME
#    - echo $PYTHON
#    - coverage run --data-file=coverage_${NAME}_${PYTHON}.dat -m pytest --continue-on-collection-errors -v --durations=0 pySDC/tests -m ${NAME}
#    - mv data data_${PYTHON}

benchmark:
  image: mambaorg/micromamba
  stage: benchmark
  artifacts:
    paths:
      - benchmarks
  before_script:
    - micromamba create --yes -f etc/environment-base.yml
    - eval "$(micromamba shell hook --shell=bash)"
    - micromamba activate pySDC
    - micromamba install -c conda-forge git
    - git config --global --add safe.directory '*'
  script:
    - export STORAGE-PATH="./benchmarks"
    - pytest --continue-on-collection-errors -v pySDC/tests -m "benchmark" --benchmark-autosave  --benchmark-save-data

bundle:
  image: mambaorg/micromamba
  stage: upload
  artifacts:
    paths:
      - data
      - coverage.xml
      - benchmarks
      - htmlcov
  before_script:
    - micromamba create --yes -f etc/environment-base.yml
    - eval "$(micromamba shell hook --shell=bash)"
    - micromamba activate pySDC
  script:
    - mv data_3.10/* data/.
    - python -m coverage combine coverage_*_3.10.dat
    - python -m coverage xml
    - python -m coverage html

#upload_results:
#  image: ubuntu:latest
#  stage: upload
#  variables:
#    KEY: ${SSH_PUSH_KEY_GITHUB}
#
#  before_script:
#    - apt-get update -y && apt-get install openssh-client git -y
#    - eval $(ssh-agent -s)
#    - echo "$KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan github.com >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#    - git config --global user.email "sig.pancetta+github@gmail.com"
#    - git config --global user.name "pancetta"
#  script:
#    - git clone git@github.com:Parallel-in-Time/pySDC-benchmarks.git
#    - cd pySDC-benchmarks
#    - mkdir -p latest-benchmark
#    - cd latest-benchmark
#    - cp ../../*.json .
#    - cd ..
#    - git add -A
#    - git commit -m "adding new benchmark results"
#    - git push
