name: CI pipeline for pySDC

on:
  push:
  pull_request:
  schedule:
    - cron: '1 5 * * 1'

jobs:

  lint:
    runs-on: ubuntu-latest

    env:
      YML: 'etc/environment-lint.yml'

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Conda environment with Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ${{ env.YML }}

      - name: Code reformatting with black
        run: |
          black pySDC  --check --diff --color

      - name: Linting with flakeheaven
        run: |
          flakeheaven lint --benchmark pySDC


  spawn_gitlab_and_postprocess:
    runs-on: ubuntu-latest

    needs:
      - lint

    defaults:
      run:
        shell: bash -l {0}

    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout benchmark repository
        uses: actions/checkout@v3
        with:
          repository: Parallel-in-Time/pySDC-benchmarks
          token: ${{ secrets.BENCHMARK_BOT }}
          path: bench
          ref: main

      - name: Install Conda environment with Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: etc/environment-base.yml

      - name: Mirror + trigger CI
        uses: SvanBoxel/gitlab-mirror-and-ci-action@master
        with:
          args: "https://gitlab.hzdr.de/r.speck/pysdc"
        env:
          FORCE_PUSH: "true"
          GITLAB_HOSTNAME: "gitlab.hzdr.de"
          GITLAB_USERNAME: "r.speck"
          GITLAB_PASSWORD: ${{ secrets.GITLAB_SECRET_H }}
          GITLAB_PROJECT_ID: "3525"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get and prepare artifacts
        run: |
          pipeline_id=$(curl --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_SECRET_H }}" --silent "https://gitlab.hzdr.de/api/v4/projects/3525/repository/commits/${{ github.head_ref || github.ref_name }}" | jq '.last_pipeline.id')
          job_id=$(curl --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_SECRET_H }}" --silent "https://gitlab.hzdr.de/api/v4/projects/3525/pipelines/$pipeline_id/jobs" |  jq '.[] | select( .name == "bundle" ) | select( .status == "success" ) | .id')
          curl --output artifacts.zip "https://gitlab.hzdr.de/api/v4/projects/3525/jobs/$job_id/artifacts"
          rm -rf data
          unzip artifacts.zip
          mkdir -p docs/benchmarks
          for i in benchmarks/*.json; do jq '.commit_info.branch="${{ github.head_ref || github.ref_name }}"' $i > docs/$i; done;

      - name: Generate Coverage badge
        run: |
          pip install genbadge[all]
          genbadge coverage -i coverage.xml -o htmlcov/coverage-badge.svg

      - name: Generate benchmark report
        uses: pancetta/github-action-benchmark@v1
        with:
          name: pySDC Benchmark with pytest-benchmark
          tool: 'pytest'
          output-file-path: docs/benchmarks/output.json
          auto-push: false
          skip-fetch-gh-pages: true
          benchmark-data-dir-path: bench/${{ github.head_ref || github.ref_name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push benchmark data
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.BENCHMARK_BOT }}
        with:
          source_file: 'bench/${{ github.head_ref || github.ref_name }}'
          destination_repo: 'Parallel-in-Time/pySDC-benchmarks'
          user_email: 'sig.pancetta+github@email.com'
          user_name: 'pancetta'

      - name: Build documentation
        run: |
          chmod u+x ./docs/update_apidocs.sh
          ./docs/update_apidocs.sh
          sphinx-build -b html docs/source docs/build/html
          mv htmlcov docs/build/html/.
          mkdir -p docs/build/html/benchmarks
          cp -r bench/${{ github.head_ref || github.ref_name }}/* docs/build/html/benchmarks/.

      - name: Store docs
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/build/html

#      - name: Deploy ðŸš€
#        uses: JamesIves/github-pages-deploy-action@4.1.4
#        if: ${{ github.event_name == 'push' && github.repository_owner == 'Parallel-in-Time' && github.ref == 'refs/heads/master' && !env.ACT }}
#        with:
#          branch: gh-pages # The branch the action should deploy to.
#          folder: docs/build/html # The folder the action should deploy.
